<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>巍博</title>
  
  <subtitle>头顶一座山</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/SteveJeson/SteveJeson.github.io/"/>
  <updated>2019-02-21T07:31:27.321Z</updated>
  <id>https://github.com/SteveJeson/SteveJeson.github.io/</id>
  
  <author>
    <name>柳巍</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>阅读计划100天</title>
    <link href="https://github.com/SteveJeson/SteveJeson.github.io/2019/02/21/%E9%98%85%E8%AF%BB%E8%AE%A1%E5%88%92100%E5%A4%A9/"/>
    <id>https://github.com/SteveJeson/SteveJeson.github.io/2019/02/21/阅读计划100天/</id>
    <published>2019-02-21T07:30:28.000Z</published>
    <updated>2019-02-21T07:31:27.321Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is code area.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
    
      <category term="阅读" scheme="https://github.com/SteveJeson/SteveJeson.github.io/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>Git命令整理</title>
    <link href="https://github.com/SteveJeson/SteveJeson.github.io/2019/02/21/Git%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/"/>
    <id>https://github.com/SteveJeson/SteveJeson.github.io/2019/02/21/Git命令整理/</id>
    <published>2019-02-21T07:13:58.000Z</published>
    <updated>2019-02-21T07:23:06.304Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git命令大全"><a href="#Git命令大全" class="headerlink" title="Git命令大全"></a>Git命令大全</h1><h2 id="1、配置Git"><a href="#1、配置Git" class="headerlink" title="1、配置Git"></a>1、配置Git</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">## 安装 Git 之后，你要做的第一件事情就是去配置你的名字和邮箱，因为每一次提交都需要这些信息</span><br><span class="line">git config --global user.name &quot;your name&quot;</span><br><span class="line">git config --global user.email &quot;your email&quot;</span><br><span class="line">## 获取Git配置信息</span><br><span class="line">git config --list</span><br><span class="line">## 生成SSH</span><br><span class="line">ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span><br></pre></td></tr></table></figure><h2 id="2、创建版本库和提交代码"><a href="#2、创建版本库和提交代码" class="headerlink" title="2、创建版本库和提交代码"></a>2、创建版本库和提交代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">## 初始化一个git仓库</span><br><span class="line">git init</span><br><span class="line">## 关联(添加)远程库地址（可关联多个）git remote add 别名 地址</span><br><span class="line">git remote add origin http://host/repository/myproject.git </span><br><span class="line">## 查看仓库状态</span><br><span class="line">git status</span><br><span class="line">## 将所有修改添加到暂存区</span><br><span class="line">git add .</span><br><span class="line">## Ant风格添加修改</span><br><span class="line">git add *</span><br><span class="line">##  将以Controller结尾的文件的所有修改添加到暂存区</span><br><span class="line">git add *Controller </span><br><span class="line">## 将所有以Hello开头的文件的修改添加到暂存区 例如:HelloWorld.txt,Hello.java</span><br><span class="line">git add Hello*  </span><br><span class="line">## 将以Hello开头后面只有一位的文件的修改提交到暂存区 例如:Hello1.txt,HelloA.java      </span><br><span class="line">## 如果是HelloGit.txt或者Hello.java是不会被添加的</span><br><span class="line">git add Hello?</span><br><span class="line">## 将暂存区的修改提交到仓库</span><br><span class="line">git commit -m &quot;comment&quot; </span><br><span class="line">## 将工作区的修改提交到仓库，相当于git add . 与 git commit -m &quot;comment&quot;的合体</span><br><span class="line">git commit –am &quot;comment&quot; 或 git commit –a –m &quot;comment&quot;</span><br></pre></td></tr></table></figure><h2 id="3、本地和远程的同步"><a href="#3、本地和远程的同步" class="headerlink" title="3、本地和远程的同步"></a>3、本地和远程的同步</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">## 查看远程库地址信息</span><br><span class="line">git remote -v</span><br><span class="line">## 查看远程库origin状态</span><br><span class="line">git remote show origin</span><br><span class="line">## 修改关联的远程库地址 git remote set-url 别名 地址</span><br><span class="line">git remote set-url origin http://192.168.1.161/ddc/ddcsz.git</span><br><span class="line">## 删除关联的远程库地址</span><br><span class="line">git remote rm origin</span><br><span class="line">## 推送本地库代码到远程库</span><br><span class="line">git push -u origin master //推送本地代码到origin库的master分支，origin为关联地址时写的别名</span><br><span class="line">## 从远程的origin仓库的master分支下载代码到本地的origin master</span><br><span class="line">git fetch origin master</span><br><span class="line">## 从远程origin仓库的master分支下载代码到本地temp分支，如果temp分支不存在则会新建一个；不会自动合并</span><br><span class="line">git fetch origin master:temp</span><br><span class="line">## 如果不加参数，则取回所有分支的更新</span><br><span class="line">git fetch</span><br><span class="line">## 取回远程next分支，与本地master分支合并；相当于先git fetch再git merge</span><br><span class="line">git pull origin next:master</span><br><span class="line">## 如果远程next分支要与当前分支合并，则可以省略冒号部分</span><br><span class="line">git pull origin next</span><br><span class="line">## 当前分支自动与唯一一个追踪分支进行合并</span><br><span class="line">git pull</span><br><span class="line">## 手动建立追踪(关联)关系：指定本地当前所在分支追踪远程next分支</span><br><span class="line">git branch --set-upstream-to origin/next</span><br></pre></td></tr></table></figure><h2 id="4、分支管理"><a href="#4、分支管理" class="headerlink" title="4、分支管理"></a>4、分支管理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">## 新建分支</span><br><span class="line">git branch dev</span><br><span class="line">## 重命名分支</span><br><span class="line">git branch -m old_local_branch_name new_local_branch_name</span><br><span class="line">## 切换到分支</span><br><span class="line">git checkout dev</span><br><span class="line">## 新建+切换分支</span><br><span class="line">git checkout -b dev</span><br><span class="line">## 新建+切换分支+关联远程分支</span><br><span class="line">git checkout -b dev origin/dev</span><br><span class="line">## 推送本地分支到远程库</span><br><span class="line">git push origin dev</span><br><span class="line">## Fast forward模式合并dev分支到当前分支,不记录本次操作</span><br><span class="line">git merge dev</span><br><span class="line">## Fast forward模式合并远程dev分支到当前分支</span><br><span class="line">git merge origin/dev</span><br><span class="line">## 禁用Fast forward模式，合并dev分支到当前分支，幷记录本次操作;如果不使用-m参数</span><br><span class="line">git merge --no-ff -m “Merge branch dev” dev</span><br><span class="line">## 查看本地分支</span><br><span class="line">git branch</span><br><span class="line">## 查看遠程分支</span><br><span class="line">git branch -r</span><br><span class="line">## 查看包括本地和远程所有的分支</span><br><span class="line">git branch -a</span><br><span class="line">## 查看各个分支最后一个提交对象的信息</span><br><span class="line">git branch -v</span><br><span class="line">## 查看各个分支对应的远程分支及最后一个提交对象的信息</span><br><span class="line">git branch -vv</span><br><span class="line">## 查看哪些分支被幷入当前分支</span><br><span class="line">git branch --merged</span><br><span class="line">## 查看尚未与当前分支合并的分支</span><br><span class="line">git branch --no-merged</span><br><span class="line">## 删除本地dev分支</span><br><span class="line">git branch -d dev</span><br><span class="line">## 强制删除本地dev分支</span><br><span class="line">git branch -D dev</span><br><span class="line">## 删除本地对应的远程分支</span><br><span class="line">git branch -r -d origin/dev</span><br><span class="line">## 远程删除git服务器上的分支</span><br><span class="line">git push origin -d dev</span><br><span class="line">git push origin --delete dev</span><br><span class="line">## 将当前分支的修改打成补丁，以develop最近一次提交作为基础，然后将补丁运用上去</span><br><span class="line">git rebase develop</span><br><span class="line">## 放弃本次rebase过程，回到初始状态</span><br><span class="line">git rebase --abort</span><br><span class="line">## 跳过本次补丁运用</span><br><span class="line">git rebase --skip</span><br><span class="line">## 继续运用补丁</span><br><span class="line">git rebase --continue</span><br></pre></td></tr></table></figure><h2 id="5、查看日志"><a href="#5、查看日志" class="headerlink" title="5、查看日志"></a>5、查看日志</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">## 以默认格式输出日志</span><br><span class="line">git log</span><br><span class="line">## 将每条日志输出为一行</span><br><span class="line">git log --oneline</span><br><span class="line">## 指定显示最近多少条日志 git log -[length]</span><br><span class="line">git log --oneline -2</span><br><span class="line">## 指定跳过前几条日志 git log --skip=[skip]</span><br><span class="line">git log --skip=1 -2 --oneline</span><br><span class="line">## 显示更多提交信息，包括提交ID，文件树ID，父提交ID，作者和提交者</span><br><span class="line">git log –pretty=raw</span><br><span class="line">## 显示提交的具体改动记录，相当于多次使用git show [commit_id]</span><br><span class="line">git log -p</span><br><span class="line">## 仅查看哪些文件有改动</span><br><span class="line">git log --stat</span><br><span class="line">## 比较本地仓库和远程仓库的区别</span><br><span class="line">git log -p master.. origin/master</span><br><span class="line">## 绘制提交线索，有合并也会显示</span><br><span class="line">git log --graph --oneline</span><br><span class="line">## 显示合并过程，简略提交信息</span><br><span class="line">git log --graph --pretty=oneline --abbrev-commit</span><br><span class="line">## 显示一些相关的信息，如HEAD、分支名、tag名等</span><br><span class="line">git log --decorate --oneline</span><br><span class="line">## 显示每次提交对应的文件改动</span><br><span class="line">git log --name-status --oneline</span><br><span class="line">## 通过作者搜索提交日志,yourname可以包含通配符</span><br><span class="line">git log --author yourname</span><br><span class="line">## 通过提交关键字搜索日志</span><br><span class="line">git log --grep keywords</span><br><span class="line">## 以上两者组合使用搜索日志</span><br><span class="line">git log --author yourname --grep keywords</span><br><span class="line">## 查看最近提交的tag</span><br><span class="line">git describe</span><br><span class="line">## 查看各种对象的详细情况</span><br><span class="line">git show [commit_id|tag_name|branch_name|...]</span><br><span class="line">## 查看某个文件的历史修改情况</span><br><span class="line">git blame [file_path]</span><br><span class="line">## 查看分支操作记录</span><br><span class="line">git reflog</span><br></pre></td></tr></table></figure><h2 id="6、标签-tag-的使用"><a href="#6、标签-tag-的使用" class="headerlink" title="6、标签(tag)的使用"></a>6、标签(tag)的使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">## 创建轻量标签：不需要传递参数，指定标签名即可</span><br><span class="line">git tag v1.0.0</span><br><span class="line">## 创建附注标签：参数-a即annotated的缩写，指定标签类型，后附标签名。参数m指定标签说</span><br><span class="line">## 明，说明信息会保存在标签对象中</span><br><span class="line">git tag -a v1.0.0 -m &quot;标签说明&quot;</span><br><span class="line">## 列出当前仓库的所有标签</span><br><span class="line">git tag</span><br><span class="line">## 列出符合模式的标签</span><br><span class="line">git tag -l &apos;v1.0.*&apos;</span><br><span class="line">## 查看标签版本信息</span><br><span class="line">git show v1.0.0</span><br><span class="line">## 切换到标签</span><br><span class="line">git checkout v1.0.0</span><br><span class="line">## 删除本地标签 </span><br><span class="line">git tag -d v1.0.0 </span><br><span class="line">## 删除远程库标签</span><br><span class="line">git push origin :refs/tags/v1.0.0</span><br><span class="line">## 给指定的commit打标签</span><br><span class="line">git tag -a v1.0.1 [commit_id] -m &quot;打标签测试&quot;</span><br><span class="line">## 将指定标签提交到git服务器</span><br><span class="line">git push origin v1.0.0</span><br><span class="line">## 将本地所有标签一次性提交到git服务器</span><br><span class="line">git push origin –-tags</span><br></pre></td></tr></table></figure><h2 id="7、比较修改文件"><a href="#7、比较修改文件" class="headerlink" title="7、比较修改文件"></a>7、比较修改文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">## 工作区与暂存区比较</span><br><span class="line">git diff filepath</span><br><span class="line">## 工作区与HEAD(当前版本)比较</span><br><span class="line">git diff  HEAD -- filepath</span><br><span class="line">## 暂存区与HEAD比较</span><br><span class="line">git diff --staged filepath 或者 git diff --cached filepath</span><br><span class="line">## 当前分支的文件与branchName 分支的文件进行比较</span><br><span class="line">git diff branchName filepath</span><br><span class="line">## 两个提交版本之间的比较 </span><br><span class="line">git diff commitId1 commitId2</span><br><span class="line">## 与某一次提交的某个文件夹或者文件进行比较</span><br><span class="line">git diff commitId filepath </span><br><span class="line">## 两个版本的src文件夹或者文件的比较</span><br><span class="line">git diff commitId1 commitId2 src</span><br><span class="line"></span><br><span class="line"># 使用 git diff 打补丁</span><br><span class="line">## patch的命名是随意的，不加其他参数时作用是当我们希望将本仓库工作区的修改拷贝一份到其他机器上使用，</span><br><span class="line">## 但是修改的文件比较多，拷贝量比较大，此时我们可以将修改的代码做成补丁，之后在其他机器上对应目录下使用 ## git apply patch 将补丁打上即可</span><br><span class="line">git diff &gt; patch</span><br><span class="line">## 运用补丁</span><br><span class="line">git apply patch</span><br><span class="line">## 两个commit间的修改（包含两个commit）（带提交信息）</span><br><span class="line">git format-patch commitId1 commitId2</span><br><span class="line">## 单个commit（带提交信息）</span><br><span class="line">git format-patch -1 commitId</span><br><span class="line">## 从某commit以来的修改（不包含该commit）</span><br><span class="line">git format-patch commitId</span><br><span class="line">## 生成xxx.rej冲突文件，不带提交信息，需要重新提交</span><br><span class="line">git apply --reject *.patch</span><br></pre></td></tr></table></figure><h2 id="8、撤销修改和版本回退"><a href="#8、撤销修改和版本回退" class="headerlink" title="8、撤销修改和版本回退"></a>8、撤销修改和版本回退</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">## 修改上次提交信息</span><br><span class="line">git commit --amend</span><br><span class="line">## 撤销暂存区的修改，重新放回工作区</span><br><span class="line">git reset HEAD [file_path]</span><br><span class="line">## 丢弃工作区的修改，恢复到修改前的版本状态</span><br><span class="line">git checkout -- [file_path]</span><br><span class="line">## 撤销所有修改文件</span><br><span class="line">git reset --hard</span><br><span class="line">## 撤销已提交到本地仓库但是还未推送到远程的文件</span><br><span class="line">git reset --hard origin/master</span><br><span class="line">## 回退到上一个版本(注：git中的HEAD指当前版本，上一个加上^表示，上上个用两个^，3个</span><br><span class="line">## 用HEAD~3，以此类推)</span><br><span class="line">git reset --hard HEAD^</span><br><span class="line">## 回退到指定版本</span><br><span class="line">git reset --hard [commit_id]</span><br><span class="line">## 以上命令hard参数可以被替换为soft和mixed参数</span><br><span class="line">git reset --hard //版本和状态一起回退，并删除回退点之前的信息，回退的比较彻底干净</span><br><span class="line">git reset --soft //版本和状态一起回退，但是会保留回退点之前的信息</span><br><span class="line">git reset --mixed //版本回退，但是会保留回退点之前的状态和信息，为默认操作</span><br></pre></td></tr></table></figure><h2 id="9、储藏-stash"><a href="#9、储藏-stash" class="headerlink" title="9、储藏(stash)"></a>9、储藏(stash)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">## 储藏当前所有修改，让工作区变得干净</span><br><span class="line">git stash save [description]</span><br><span class="line">## 查看现有的stash储藏列表</span><br><span class="line">git stash list</span><br><span class="line">## 重新应用指定储藏,不加参数则默认第一个</span><br><span class="line">git stash apply [stash@&#123;id&#125;] //id可通过list命令查看</span><br><span class="line">## 重新应用第一个stash,并删除</span><br><span class="line">git stash pop</span><br><span class="line">## 重新应用指定stash，并删除</span><br><span class="line">git stash pop [stash@&#123;id&#125;]</span><br><span class="line">## 清空stash列表</span><br><span class="line">git stash clear</span><br><span class="line">## 删除指定stash</span><br><span class="line">git stash drop [stash@&#123;id&#125;]</span><br><span class="line">## 基于stash创建分支，创建成功则会删除stash</span><br><span class="line">git stash branch [branch_name]</span><br></pre></td></tr></table></figure><h2 id="10、删除"><a href="#10、删除" class="headerlink" title="10、删除"></a>10、删除</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">## 更新远程库对象时删除没用的对象</span><br><span class="line">git fetch origin --prune</span><br><span class="line">## 删除远程库没用的对象</span><br><span class="line">git remote prune origin</span><br><span class="line">## 删除未跟踪(没有添加到暂存区)的文件</span><br><span class="line">git clean -f [file_path]</span><br><span class="line">## 删除未跟踪的目录及文件</span><br><span class="line">git clean -df [dir_path]</span><br><span class="line">## 删除所有未跟踪的目录及文件</span><br><span class="line">git clean -xdf</span><br><span class="line">## 显示即将要删除的目录和文件</span><br><span class="line">git clean -n</span><br><span class="line">## 移除项目的版本控制(删除.git文件)</span><br><span class="line">rm -rf .git</span><br></pre></td></tr></table></figure><h2 id="11、跟踪处理"><a href="#11、跟踪处理" class="headerlink" title="11、跟踪处理"></a>11、跟踪处理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">## 忽略已跟踪的文件</span><br><span class="line">git update-index --assume-unchanged [file_path]</span><br><span class="line">## 恢复跟踪</span><br><span class="line">git update-index --no-assume-unchanged [file_path]</span><br><span class="line">## 取消某个文件跟踪，使之成为未跟踪状态</span><br><span class="line">git rm -f --cached [file_path]　</span><br><span class="line">## 取消某个文件目录跟踪，使之成为未跟踪状态</span><br><span class="line">git rm -r --cached [dir_path]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Git命令大全&quot;&gt;&lt;a href=&quot;#Git命令大全&quot; class=&quot;headerlink&quot; title=&quot;Git命令大全&quot;&gt;&lt;/a&gt;Git命令大全&lt;/h1&gt;&lt;h2 id=&quot;1、配置Git&quot;&gt;&lt;a href=&quot;#1、配置Git&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="-Git" scheme="https://github.com/SteveJeson/SteveJeson.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>search</title>
    <link href="https://github.com/SteveJeson/SteveJeson.github.io/2019/02/21/search/"/>
    <id>https://github.com/SteveJeson/SteveJeson.github.io/2019/02/21/search/</id>
    <published>2019-02-21T06:36:48.000Z</published>
    <updated>2019-02-21T06:36:48.620Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://github.com/SteveJeson/SteveJeson.github.io/2019/02/21/hello-world/"/>
    <id>https://github.com/SteveJeson/SteveJeson.github.io/2019/02/21/hello-world/</id>
    <published>2019-02-21T05:45:19.992Z</published>
    <updated>2019-02-21T05:45:19.992Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
